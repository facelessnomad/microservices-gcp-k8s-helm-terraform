apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.frontend.name }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.frontend.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.frontend.name }}
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: server
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
          image: "{{ .Values.images.repository }}/{{ .Values.frontend.name }}:{{ .Values.images.tag }}"
          ports:
          - containerPort: 8080
          readinessProbe:
            initialDelaySeconds: 10
            httpGet:
              path: "/_healthz"
              port: 8080
              httpHeaders:
              - name: "Cookie"
                value: "shop_session-id=x-readiness-probe"
          livenessProbe:
            initialDelaySeconds: 10
            httpGet:
              path: "/_healthz"
              port: 8080
              httpHeaders:
              - name: "Cookie"
                value: "shop_session-id=x-liveness-probe"
          env:
          - name: PORT
            value: "8080"
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: "{{ .Values.productCatalogService.name }}:3550"
          - name: CURRENCY_SERVICE_ADDR
            value: "{{ .Values.currencyService.name }}:7000"
          - name: CART_SERVICE_ADDR
            value: "{{ .Values.cartService.name }}:7070"
          - name: RECOMMENDATION_SERVICE_ADDR
            value: "{{ .Values.recommendationService.name }}:8080"
          - name: SHIPPING_SERVICE_ADDR
            value: "{{ .Values.shippingService.name }}:50051"
          - name: CHECKOUT_SERVICE_ADDR
            value: "{{ .Values.checkoutService.name }}:5050"
          - name: AD_SERVICE_ADDR
            value: "{{ .Values.adService.name }}:9555"
          # # ENV_PLATFORM: One of: local, gcp, aws, azure, onprem, alibaba
          # # When not set, defaults to "local" unless running in GKE, otherwies auto-sets to gcp
          # - name: ENV_PLATFORM
          #   value: "aws"
          - name: ENABLE_PROFILER
            value: "0"
          # - name: CYMBAL_BRANDING
          #   value: "true"
          # - name: FRONTEND_MESSAGE
          #   value: "Replace this with a message you want to display on all pages."
          # As part of an optional Google Cloud demo, you can run an optional microservice called the "packaging service".
          # - name: PACKAGING_SERVICE_URL
          #   value: "" # This value would look like "http://123.123.123"
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.frontend.name }}
spec:
  type: {{ .Values.frontend.service.type }}
  selector:
    app: {{ .Values.frontend.name }}
  ports:
  - name: {{ .Values.frontend.service.ports.name }}
    port: {{ .Values.frontend.service.ports.sourcePort }}
    targetPort: {{ .Values.frontend.service.ports.targetPort }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.frontend.name }}-external
spec:
  type: LoadBalancer
  selector:
    app: {{ .Values.frontend.name }}
  ports:
  - name: {{ .Values.frontend.externalService.ports.name }}
    port: {{ .Values.frontend.externalService.ports.sourcePort }}
    targetPort: {{ .Values.frontend.externalService.ports.targetPort }}